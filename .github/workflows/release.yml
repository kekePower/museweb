name: Build and Package Release

on:
  release:
    types: [created]
  workflow_dispatch:

# Add explicit permissions for the GITHUB_TOKEN
permissions:
  contents: write # This allows the action to create releases
    # Allow manual triggering for testing

jobs:
  build:
    name: Build and Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            output_name: museweb-linux-amd64
          - goos: linux
            goarch: arm64
            output_name: museweb-linux-arm64
          - goos: darwin
            goarch: arm64
            output_name: museweb-darwin-arm64
          - goos: windows
            goarch: amd64
            output_name: museweb-windows-amd64
            extension: .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.4'
          check-latest: false
          
      - name: Debug environment
        run: |
          go version
          go env
          cat go.mod
          cat go.sum
          
      - name: Clean dependencies
        run: |
          go clean -modcache
          
      - name: Update dependencies
        run: go mod tidy -v
        
      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -v -o ${{ matrix.output_name }}${{ matrix.extension || '' }} .

      - name: Create package directory
        run: |
          # Get version from main.go
          VERSION=$(grep -oP 'const version = "\K[^"]+' main.go)
          mkdir -p museweb-$VERSION/prompts
          mkdir -p museweb-$VERSION/public
          mkdir -p museweb-$VERSION/examples
          cp ${{ matrix.output_name }}${{ matrix.extension || '' }} museweb-$VERSION/
          cp -r prompts/*txt museweb-$VERSION/prompts/
          cp -r public/* museweb-$VERSION/public/
          cp -r examples/* museweb-$VERSION/examples/
          cp README.md museweb-$VERSION/
          cp museweb-prompt-engineering.md museweb-$VERSION/
          cp config.example.yaml museweb-$VERSION/

      - name: Create archive
        run: |
          # Get version from main.go
          VERSION=$(grep -oP 'const version = "\K[^"]+' main.go)
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip -r ${{ matrix.output_name }}.zip museweb-$VERSION
          else
            tar -czf ${{ matrix.output_name }}.tar.gz museweb-$VERSION
          fi

      # For workflow_dispatch, we'll create artifacts for easy download
      - name: Upload build artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.output_name }}${{ matrix.goos == 'windows' && '-zip' || '-tar-gz' }}
          path: ./${{ matrix.output_name }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
          retention-days: 5
          
      # For release events, upload to the release
      - name: Upload release asset
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ./${{ matrix.output_name }}${{ matrix.goos == 'windows' && '.zip' || '.tar.gz' }}
          tag_name: ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
